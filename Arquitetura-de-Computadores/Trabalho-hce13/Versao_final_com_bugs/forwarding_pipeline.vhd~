library IEEE;
use IEEE.std_logic_1164.all;
use work.p_MI0.all;

entity control_pipeline is
	port 	(
			opcode:   in  std_logic_vector(5 downto 0);
		 	RegDst:   out std_logic;
			ALUSrc:   out std_logic_vector(1 downto 0); 
			MemtoReg: out std_logic_vector(1 downto 0);
			RegWrite: out std_logic; 
			MemRead:  out std_logic; 
			MemWrite: out std_logic; 
			Branch:   out std_logic; 
			ALUOp:    out std_logic_vector(2 downto 0)
		);
end control_pipeline;


architecture arq_control_pipeline of control_pipeline is



    --input [5:0] opcode;
    --output RegDst, RegWrite, MemRead, MemWrite, Branch;
    --output [1:0] ALUOp, ALUSrc, MemtoReg;
    --reg    RegDst, RegWrite, MemRead, MemWrite, Branch;
    --reg    [1:0] ALUOp, ALUSrc, MemtoReg;

begin
   
    process (opcode)
    begin
        case opcode is
        when R_FORMAT => RegDst <= '1'; ALUSrc <= "00"; MemtoReg <= "00"; RegWrite <='1'; MemRead<='0'; MemWrite<='0'; Branch<='0'; ALUOp <= "010"; -- R type
        when LW => RegDst <= '0'; ALUSrc <= "01"; MemtoReg <= "01"; RegWrite <='1'; MemRead<='1'; MemWrite<='0'; Branch<='0'; ALUOp <= "000";  -- LW
		when SW => RegDst <= 'X'; ALUSrc <= "01"; MemtoReg <= "XX"; RegWrite <='0'; MemRead<='0'; MemWrite<='1'; Branch<='0'; ALUOp <= "000";  -- SW
		when BEQ => RegDst <= 'X'; ALUSrc <= "00"; MemtoReg <= "XX"; RegWrite <='0'; MemRead<='0'; MemWrite<='0'; Branch<='1'; ALUOp <= "001"; -- BEQ
		when LUI => RegDst <= '0'; ALUSrc <= "01"; MemtoReg <= "00"; RegWrite <='1'; MemRead<='0'; MemWrite<='0'; Branch<='0'; ALUOp <= "011"; -- LUI
		when ADDM => RegDst <= '1'; ALUSrc <= "00"; MemtoReg <= "10"; RegWrite <='1'; MemRead<='1'; MemWrite<='0'; Branch<='0'; ALUOp <= "101"; -- ADDM
		when others => RegDst <= '0'; ALUSrc <= "00"; MemtoReg <= "00"; RegWrite <='0'; MemRead<='0'; MemWrite<='0'; Branch<='0'; ALUOp <= "000"; -- NOP / Instruções inválidas / Etecétera
	end case;
    end process;

end arq_control_pipeline;
